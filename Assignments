Q1.Write a program to print Hello World. Compile and run it using command prompt.
=>
class Hello {
 public static void main(String args[])
{
System.out.println("Hello World");
}
}


Q2.Write a program to declare a variable named rollNo of integer type. Assign it a value (let say 100) to it and print the following statement roll no = 100 .
=>
class Stud{
     public static void main(String args[]){
     int rn=100;
     System.out.println("roll no = " + rn );
      }
}


Q3.Find the result of following expressions. You need to determine the primitive data type of the variable by looking carefully the given expression and initialize variables by any random value.
A. y = x2 + 3x - 7 (print value of y) 
B. y = x++ + ++x (print value of x and y) 
C. z = x++ - --y - --x  +  x++ (print value of x ,y and z)
D. z = x && y || !(x || y)  (print value of z) [ x, y, z are boolean variables ]
=>
public class Q3{
    public static void main(String[] args) {
        int x = 2;
        int y,z;
        
        y = (x*x+3*x-7);
        System.out.println("Y:"+y);

        y = (x++ + ++x);
        System.out.println("X:"+x+" "+"Y:"+y);

        z = (x++ - --y - --x + x++);
        System.out.println("X:"+x+" "+"Y:"+y+" "+"Z:"+z);

        (boolean)z = ((boolean)x && (boolean)y || !((boolean)x || (boolean)y));
        System.out.println("Z:"+z);

    }
}



Q4.Write a program that initializes 2 byte type of variables. Add the values of these variables and store in a byte type of variable. [Note: primitive down casting is required in this program ] .
=>
class Q4{
   public static void main(String args[]){
   byte b1=10;
   byte b2=20;
   int k = (b1 + b2);
   System.out.println((byte)k);    
  }
}

Q5.Write a program that takes user’s name as command line argument and prints Welcome <entered user name>.
=>
class Q5{
    public static void main (String args[]){
    String name = args[0];
    System.out.println("Welcome "+name); 
 }
}


Q6.	Write a program that takes radius of a circle as input. Read the entered radius using Scanner class. Then calculate and print the area and circumference of the circle.
=>
import java.util.Scanner;
class Q6{
      public static void main(String args[]){

      Scanner sc = new Scanner(System.in);
       
      float radius  = sc.nextFloat();
       
      float result = 3.14F*(radius * radius);
       System.out.println(result);
     }
}


Q7.	Write a program to calculate sum of 5 subject’s marks & find percentage. Take the obtained marks from user using Scanner class. Output should be in this format [ percentage marks = 99 % ]. Use concatenation operator here.
=>
import java.util.Scanner;
class Q7{
    public static void main (String args[]){
     Scanner sc = new Scanner (System.in);
      System.out.println("Enter Sub1 marks:");
      int  s1 =sc.nextInt();
      System.out.println("Enter Sub2 marks:");
      int  s2 =sc.nextInt();
      System.out.println("Enter Sub3 marks:");
      int  s3 =sc.nextInt();
      System.out.println("Enter Sub4 marks:");
      int  s4 =sc.nextInt();
      System.out.println("Enter Sub5 marks:");
      int  s5 =sc.nextInt();
      int total=500;
      int sum = s1+s2+s3+s4+s5;
      float res = (float)sum/total;
      float per= res*50;
      System.out.println("percentage marks = " + per + "%");
      }
}


Q8.Write a program to find the simple interest. Take the principle amount, rate of interest and time from user using Scanner class.
=>
import java.util.Scanner;
  class Q8{
     public static void main (String args[]){
     Scanner in=new Scanner(System.in);
     System.out.println("Enter Principle:");
     float p = in.nextFloat();
     System.out.println("Enter Rate:");
     float r = in.nextFloat();
     System.out.println("Enter Time:");
     float t = in.nextFloat();

     float SI=(p*t*r)/100;
     System.out.println("Simple Interest="+SI);
     
       }
}


Q9.Write a program to read the days (eg. 670 days) as integer value using Scanner class. Now convert the entered days into complete years, months and days and print them.
=>
import java.util.Scanner;
public class Q9
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of days:");
        int nod = sc.nextInt();

       int yr=0;
       int m=0; 
       int d=0;

       while (nod>=365){
       nod -=365;
        yr++;          
      }
     
      while(nod>=30){
       nod -=30;
       m++;            
       }   
  System.out.println(yr+ "years " +m+ "months "+nod+"days ");
    }
}


Q10.Write a program to convert temperature from Fahrenheit to Celsius. Take Fahrenheit as input using Scanner class. [ formula : C= 5*(f-32)/9 ].
=>
import java.util.Scanner;
class Q10
{
   public static void main(String args[])
   {
      Scanner in = new Scanner(System.in);
      System.out.println("Enter temperature");

      float temp=in.nextFloat();
      float C= 5*(temp-32)/9;

      System.out.println("Fahrenheit to Celsius = " + String.format("%.3f", C));
     
   }
}


Q11.	Write a program to swap two numbers without using third variable.
=>
import java.util.Scanner;

class Q11{
      public static void main(String args[]){
           Scanner in= new Scanner(System.in);
           System.out.println("Enter 1st no:");
           int num1=in.nextInt();
           System.out.println("Enter 2nd no:");
           int num2=in.nextInt();
           System.out.println("Before Swap: 1st = "+num1+" \t 2nd = "+num2);
         
           num1=num1+num2;
           num2=num1-num2;
           num1=num1-num2;
           System.out.println("After Swap:  1st = "+num1+" \t 2nd = "+num2);

        }
}


Q13.Program to find greatest in 3 numbers. [ once using if else statement and then using ternary operator ( logical operator) ] 
=>
import java.util.Scanner;

class Q13_1
{
public static void main(String args[]){

Scanner sc=new Scanner(System.in);
System.out.println(": Greatest of three :");
System.out.println("Enter 1st number : ");
int  a=sc.nextInt();
System.out.println("Enter 2nd number : ");
int  b=sc.nextInt();
System.out.println("Enter 3rd number : ");
int  c=sc.nextInt();

if(a>b && a>c)
{
	System.out.println("The greatest of three "+a+" and "+b+" and "+c+" is --> "+a);
}
else if(b>a && b>c)
{
	System.out.println("The greatest of three "+a+" and "+b+" and "+c+" is --> "+b);
}
else
{
	System.out.println("The greatest of three "+a+" and "+b+" and "+c+" is --> "+c);
}

}
}

class Q13_2{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);

int  n1=sc.nextInt();
int  n2=sc.nextInt();
int  n3=sc.nextInt();

int max = (n1 > n2) ? (n1 > n3 ? n1 : n3) : (n2 > n3 ? n2 : n3);
System.out.println("Maximum is: "+max);
}
}


Q14.Program to check that entered year is a leap year or not.
=>
import java.util.Scanner;

class Q14
{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);

int year =sc.nextInt();

String ch= (year%4==0 && year%100!=0) ?  year + "is a leap year" : ((year%400 == 0 ) ? year+" is a leap year": year + "is not a leap year");

System.out.println(ch);
     }
}


15.Accept person’s gender (character m for male and f for female), age (integer), as input and then check whether person is eligible for marriage or not.
=>
import java.util.Scanner;
class Q15
{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);

System.out.println("Enter age");
int age=sc.nextInt();

System.out.println("Enter gender: M/F");
int gender=sc.next().charAt(0);

if(gender == 'M')
{
           if(age >= 21){
         System.out.println("You are eligible for marriage");
           }
          else{
               System.out.println("You are not eligible for marriage");
            }
}

if(gender == 'F')
{
           if(age >= 21){
         System.out.println("You are eligible for marriage");
           }
          else{
               System.out.println("You are not eligible for marriage");
            }
}

}
}

Q16.	Write a program to print table of any entered number using loop.
=>
import java.util.Scanner;
class Q16
{
   public static void main(String args[])
   {
      Scanner sc = new Scanner(System.in);
     int no = sc.nextInt();
     
    for(int i=0;i<=10;i++)
    {
      rs=no*i;
      System.out.println(rs);
    }
   }
}

Q17.	Write a program to reverse a given number.
=>
import java.util.Scanner;

public class Q17{
    public static void main(String[] args) {
        int a = 1234;
        int no=0;
        while(a>0){
            no = a%10;
            a=a/10;
            System.out.print(no);
        }
       
    }
}


Q18.	Program to check whether number is prime or not.
=>
import java.util.Scanner;

public class Q18{
    public static void main(String[] args) {
        Scanner no = new Scanner(System.in);
        int a=no.nextInt();
        int ab=123;
        for(int i=2;i<a;i++)
        {
            if(a%i==0)
            {
                ab=1;
                
                break;
            }
              
        }
        if(ab==1)
        {
            System.out.println("Is a composite no "+a);
        }
        else
        {
            System.out.println("Is a prime no "+a);
        }
    }
}



Q19.	Calculate  series : 12+22+32+42+.........+n2
=>





Q20.	Print all prime numbers between two given numbers. [ break continue ]
=>
import java.util.Scanner;

public class Q20{
    public static void main(String[] args) {
        Scanner n1 = new Scanner(System.in);
       int x= n1.nextInt();
       int y= n1.nextInt();
       int flag=0;

       for(int i=x;i<=y;i++)
       {
           for(int j=2;j<i;j++)
           {
            flag=0;
               if(i%j == 0)
               {
                   break;
               }
               else
               {
                   flag=1;
                   continue;
               }
           }
           if(flag==1)
           {
               System.out.println(" "+i);
           }
       }
    }
}


Q21.	Program to show sum and average of 10 element array. Accept array elements from user. 
=>
import java.util.Scanner;

public class Q21{
    public static void main(String[] args) {
        Scanner no = new Scanner(System.in);
        int arr[] = new int[10];
        int sum=0, avg;

        for(int i=0;i<10;i++)
        {
            arr[i] = no.nextInt();
        }
        for(int i=0;i<10;i++)
        {
            sum=sum+arr[i];
        }
        avg=sum/10;
        System.out.println("Sum="+sum);
        System.out.println("Average="+avg);
    }
}


Q22.	Sort a ten element array in descending order.
=>
import java.util.Scanner;
public class Q22{
    public static void main(String[] args) {
        Scanner no = new Scanner(System.in);
        int arr[] = new int[10];
        int temp;

        for(int i=0;i<10;i++)
        {
            arr[i] = no.nextInt();
        }
        for(int i=0;i<10;i++)
        {
            for(int j=0;j<10;j++)
            {
                if(arr[i]>arr[j])
                {
                    temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }
        for(int i=0;i<10;i++)
        {
            System.out.print(" "+arr[i]);
        }
    }
}


Q23.	Write a program to reverse the array elements.
=>
import java.util.Scanner;
public class Q23{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[4];
        int temp;

        for(int i=0;i<=3;i++)
        {
            arr[i] = sc.nextInt();
        }
        for(int i=0,j=3;i<4;i++,j--)
        {
            temp=arr[i];
            arr[j]=arr[i];
            arr[i]=temp;
        }
        for(int i=0;i<=3;i++)
        {
            System.out.print(arr[i]);
        }
    }
}


Q24.	Write a program to search an element in the array.
=>




Q25.	Write the program to find the sum of even elements and sum of odd elements present in the array of integer type.
=>
import java.util.*;
public class Q25{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[8];
        int sum1=0, sum2=0;
        for(int i=0;i<8;i++)
        {
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<8;i++)
        {
            if(i%2==0)
            {
                sum1=sum1+i;
            }
            else
            {
                sum2=sum2+i;
            }
        }
        System.out.println("Sum of even no.: "+sum1);
        System.out.println("Sum of odd no.: "+sum2);
    }
}


Q26.	Create an array of 17 elements in 5 rows.  And calculate sum of all elements.
=>
import java.util.*;
public class Q26{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[][] = new int[5][5];
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<5;j++)
            {
                arr[i][j] = sc.nextInt();
                if(i==3 || i==4)
                {break;}
            }
            
        }
        int sum=0;
        for(int i=0;i<5;i++)
        {
            for(int j=0;j<5;j++)
            {
               sum=sum + arr[i][j]; 
            }
        }
        System.out.println("Sum "+sum);
    }
}


Q27.	Write a program to fine the smallest and greatest number present in the array of integer type.
=>
import java.util.Scanner;

class Q27{

	public static void main (String args[]){

		Scanner sc = new Scanner(System.in);
                  	int arr[]=new int[5];

		for(int i=0;i<arr.length;i++)
		{
		 System.out.println("Enter the elements");
		  arr[i]=sc.nextInt();
		}

        int min = arr[0];
	      int max = arr[0];
                                   
		for(int a : arr){
		System.out.print(" "+a);
		}

		for (int i = 1; i < arr.length; i++)  
		{
			if (arr[i] > max) 
			{
				max = arr[i];
			}
			if (arr[i] < min) 
			{
				min = arr[i];
			}
		}

		System.out.println("\nLargest Number in a given array is : " + max+ " and Smallest Number in a given array is : " + min);	
	}
}



Q28.Initialize one String type of array and print the elements using for each loop.
=>
import java.util.Scanner;
class Q28{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter no. words to be print in array:");
    int num=sc.nextInt();
		
		String[] names=new String[num];
	
		for(int i=0;i<num;i++){
		System.out.println("Enter the name");
		names[i]=sc.next();
   		}

		for(String a : names){
		System.out.print(" "+a);
                               
	}
}


Q29.Write a program to print the total number of one-D arrays in a two-D array and the number of elements in every one-D array present in the two-D arrays.
=>
import java.util.Scanner;
class CountArrays{

	public static void main (String args[]){
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter size of 2-D array: ");
		int row = sc.nextInt();
		int col = sc.nextInt();

		int arr[][] = new int[row][col];
		
		for(int i=0; i<arr.length; i++){
			for(int j=0; j<arr[i].length; j++){
				System.out.println("Enter a number: ");
				arr[i][j]=sc.nextInt();
			}
		}

		for(int i=0; i<arr.length; i++){
			System.out.println("Size of "+i+" array is: "+(arr[i].length));
			System.out.println("Elements in "+i+"array are:");
			for(int j=0; j<arr[i].length; j++){
				System.out.print(" "+arr[i][j]);
				
			}
			System.out.println("");
		}
	}
}


Q30.	Create an integer type 2-D array of size [3X3]. Take the elements from the user and then calculate the sum of the elements present in the diagonal.
=>
import java.util.*;
public class Q30{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[][] = new int[3][3];
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                arr[i][j] = sc.nextInt();
            }
        }
        int sum=0;
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(arr[i]==arr[j])
                {
                    sum = sum + arr[i][j];
                }
            }
        }
        System.out.println("Sum: "+sum);
    }
}



Q31.	Create a class Student with 2 data members rno and name. Create one method setData() that takes roll number and student name as parameter and stores them in data members rno and name. Create one more method showData() to print the data member values. 
Create another class ( main class) StudentDemo that creates Student class object and calls setData() and showData() methods.
=>
import java.util.*;

class Student{
    private int rno;
    private String nm;

    void setData(int rolno,String name){
        rno=rolno;
        nm=name;
    }

    void showData(){
        System.out.println("Roll No.: "+rno+"  Name: "+nm);
    }

}

public class Q31{
    public static void main(String[] args) {
        Student sd = new Student();
        sd.setData(33,"Vinu");
        sd.showData();
    }
}


Q32.	Modify the above program (no. 30) to count the no of Student objects created. [ In this program static variable is required ]
=>
import java.util.*;

class Student{

    public static int count=0;
    private int rno;
    private String nm;

    Student(){
        count++;
    }

    void setData(int rolno,String name){
        rno=rolno;
        nm=name;
        
    }

    void showData(){
        System.out.println("Roll No.: "+rno+"  Name: "+nm);
        System.out.println("Total Objects: "+count);
    }


}

public class Q32{
    public static void main(String[] args) {
        Student sd = new Student();
        sd.setData(33,"Vinu");
        sd.showData();

        Student sd1 = new Student();
        sd1.setData(43,"Hrshi");
        sd1.showData();
    }
}



Q33.	Write a program to demonstrate functionalities of this keyword in java. 
=>
import java.util.Scanner;
class Student{
   private int roll;
   private String name;
    
    Student(){
        this.roll=0;
        this.name="default";    
    }

    Student(int roll,String sname){
        this.roll=roll;
        this.name=sname;    
    }
    
    

    public void showData()
    {
        System.out.println("Roll No = "+roll);
        System.out.println("Name = "+name);
    }
}

class Q33{
   
    public static void main(String[] args) {
        char choice;
        do{
            System.out.println("You want to Add Student Info if Yes press y/n");
            Scanner sc=new Scanner(System.in);
             choice=sc.next().charAt(0);
            if(choice=='y' || choice=='Y')
            {
                int roll;
                String studName;
                System.out.println("Enter the Roll No ");
                roll=sc.nextInt();
                System.out.println("Enter the Name ");
                sc.nextLine();
                studName=sc.nextLine();

                Student st=new Student(roll,studName);
                
                st.showData();
            }
        }while(choice!='n');
        
    }
}


Q34.	Create a class Circle that has two data members, one to store the radius and another to store area and three methods first init() method to input radius from user, second calculateArea() method to calculate area of circle and third display() method to display values of radius and area.
Create class CircleDemo ( main class) that creates the Circle object and calls init(), calculateArea() and display() methods.
=>
import java.util.*;

class Circle{
    int r;
    double area;
    Scanner sc = new Scanner(System.in);

    void init(){
        System.out.println("Enter radius: ");
        r=sc.nextInt();
    }
    void cal(){
        area=3.14*r*r;
    }
    void display(){
        System.out.println("Area of Circle: "+area);
    }
}

public class Q34{
    public static void main(String[] args) {
        Circle c = new Circle();
        c.init();
        c.cal();
        c.display();
    }
}



Q35.	Create a class MathOperation that has four static methods. add() method that takes two integer numbers as parameter and returns the sum of the numbers. subtract() method that takes two integer numbers as parameter and returns the difference of the numbers. multiply() method that takes two integer numbers as parameter and returns the product. power() method that takes two integer numbers as parameter and returns the power of first number to second number. Create another class Demo (main class) 
that takes the two numbers from the user and calls all four methods of MathOperation class by providing entered numbers and prints the return values of every method.
=>
import java.util.*;

class Student{
   
    static void add(int n1,int n2){
        int add=n1+n2;
        System.out.println("Add: "+add);
    }

    static void sub(int n1,int n2){
        int sub=n1-n2;
        System.out.println("Sub: "+sub);
    }

    static void mul(int n1,int n2){
        int mul=n1*n2;
        System.out.println("Mul: "+mul);
        
    }

    static void power(int n1,int n2){
       int pw=1;
       for(int i=0;i<n2;i++)
       {
           pw = pw*n1;
       }
       System.out.println("Power: "+pw);
        
    }

}

public class Q35{
    public static void main(String[] args) {
        Student sd = new Student();
        sd.add(2,4);
        sd.sub(2,6);
        sd.mul(3,1);
        sd.power(2,2);
    }
}



36.	Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
a.	 two integers 
b.	 three floats 
c.	 all elements of array 
d.	one double and one integer 
=>
import java.util.*;

 class MathOperation{
    int multiply(int n1, int n2)
    {
        return n1*n2;
        
    }
    float multiply(float n1, float n2, float n3)
    {
        return n1*n2*n3;
        
    }
    int multiply(int... n1)
    {
        int mul=1;
        for(int i=0;i<n1.length;i++)
        {
            mul=mul*n1[i];
        }
        return mul;
    }
    double multiply(double n1, int n2)
    {
        return n1*n2;
        
    }
}

public class Q36{
    public static void main(String[] args) {
        MathOperation mo=new MathOperation();
        int m1=mo.multiply(2,4);
        System.out.println("Mul: "+m1);
        float m2=mo.multiply(2.0f,3.0f,4.0f);
        System.out.println("Mul: "+m2);
       int m3= mo.multiply(2,3,4,5);
       System.out.println("Mul: "+m3);
        double m4=mo.multiply(2.0,4);
        System.out.println("Mul: "+m4);
    }

}



Q37.	Create a class Person with properties (name and age) with following features. 
a.	Default age of person should be 18.
b.	A person object can be initialized with name and age.
c.	Method to display name and age of person
Create another class PersonDemo ( main class ) that demonstrates the functionalities of Person class by creating Person object and calling methods.
=>
import java.util.*;
 class Person{
    private int age=18;
    private String name;

    void show(String n)
    {
        name=n;
        System.out.println("Age: "+age+" "+"Name: "+name);
    }
    void show(int a, String n)
    {
        age=a;
        name=n;
        System.out.println("Age: "+age+" "+"Name: "+name);
    }
}

class Q37{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int age;
        String name;
        age=sc.nextInt();
        name=sc.next();
        Person p=new Person();
        p.show(name);
        p.show(age,name);
    }
    
}


Q38.	Create a class Employee with three data members (empNo, salary and totalSalary) and following features.
a.	Only parameterized constructor. [Do not overload the constructor]
b.	totalSalary always represents salary total of all the employees created.
c.	empNo should be auto incremented.
d.	display total employees and totalSalary using a method.
Create another class EmployeeDemo (main class) that creates some Employee objects and calls Employee method to display no. of employees and total of their salaries.
=>
import java.util.*;

class Employee{
    static private int tEmpNo,tsal;
    private int sal,eno;

    Employee(int eno, int sal){
        this.eno=eno;
        this.sal=sal;
        tsal= sal+tsal;
        tEmpNo++;
    }
    void display()
    {
        System.out.println("Total Emp: "+tEmpNo+" "+"Total Sal: "+tsal);
    }
}

public class Q38{
    public static void main(String[] args) {
        Employee e=new Employee(101,200);
        e.display();
        Employee e1=new Employee(102,300);
        e1.display();
    }
}



Q39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all three data members.  
Create a main method in different class (say ProductDemo) and perform following task:
a. Accept information for five Product objects from user and store objects in an array
b. Find pid of product with highest price. 
c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all products. ( amount spent on single product = price of product * quantity of product )
=>
import java.util.*;
class Product{
    private int pid,price,quan;
    
    static int maxPrice;

    Product(int pid, int price, int quan){
        this.pid=pid;
        this.price=price;
        this.quan=quan;
    }

    void hprice()
    {
        if(maxPrice < this.price)
        {
            maxPrice=this.price;
        }
        
    }
}

public class Q39{
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int pid,price,quan;

        Product p[] = new Product[3];
        for(int i=0;i<p.length;i++)
        {
            pid = sc.nextInt();
            price = sc.nextInt();
            quan = sc.nextInt();
            p[i] = new Product(pid,price,quan);
        }
        for(int j=0;j<p.length;j++)
        {
            p[j].hprice();
        }
        System.out.println("Max Price: "+Product.maxPrice);
    }
}



Q40.	Create a class Student having data members name, roll no., age and score.
Write a program to accept 10 records of student and store them in an array. And then arrange the student records based on the score group [0-50], [50-65], [65-80], [80-100].
=>
import java.util.Scanner;
class Student{
      int rollNo;
      String name;
      int age;
      int score;
    
    Student(int rollNo,String name,int age,int score){
        this.rollNo=rollNo;
        this.name=name;
        this.age=age;
        this.score=score;
    }
}

class Q40{
    public static void main(String[] args) {
             Scanner sc=new Scanner(System.in);
                
            System.out.println("How Many Student record Wants To store.....");
            int size=sc.nextInt();
        
            Student arr[]=new Student[size];

            for(int i=0;i<arr.length;i++){
               
                System.out.println("Enter the rollNo :");
                int rollNo=sc.nextInt();        

                System.out.println("Enter the Name :");
                sc.nextLine();
                String name=sc.nextLine();        

                System.out.println("Enter the Age :");
                int age=sc.nextInt();        

                System.out.println("Enter the Score :");
                int score=sc.nextInt();        


                Student s=new Student(rollNo,name,age,score);

                arr[i]=s;
            }

            for(int j=0;j<arr.length;j++)
            {
                for(int k=j+1;k<arr.length;k++)
                {
                    if(arr[j].score>arr[k].score)
                    {
                        Student obj=arr[j];
                        arr[j]=arr[k];
                        arr[k]=obj;
                    }
                }
            }
            for(int m=0;m<arr.length;m++)
            {
                if(arr[m].score>=0 && arr[m].score<=50)
                {
                    System.out.println("\n\nGroup of [0-50] : SCORE "+arr[m].score);
                        System.out.println("Name : "+arr[m].name);
                        System.out.println("Roll No : " + arr[m].rollNo);
                        System.out.println("Age : "+ arr[m].age);
                }

                if(arr[m].score>50 && arr[m].score<=65)
                {
                    System.out.println("\n\nGroup of [50-65] : SCORE "+arr[m].score);
                        System.out.println("Name : "+arr[m].name);
                        System.out.println("Roll No : " + arr[m].rollNo);
                        System.out.println("Age : "+ arr[m].age);
                }

                if(arr[m].score>65 && arr[m].score<=80)
                {
                    System.out.println("\n\nGroup of [65-80] : SCORE "+arr[m].score);
                        System.out.println("Name : "+arr[m].name);
                        System.out.println("Roll No : " + arr[m].rollNo);
                        System.out.println("Age : "+ arr[m].age);
                }                

                if(arr[m].score>80 && arr[m].score<=100)
                {
                    System.out.println("\n\nGroup of [80-100] : SCORE "+arr[m].score);
                        System.out.println("Name : "+arr[m].name);
                        System.out.println("Roll No : " + arr[m].rollNo);
                        System.out.println("Age : "+ arr[m].age);
                }
            }          
    }
}


Q41.	Write a program to demonstrate this() construct functionality.
=>
import java.util.Scanner;
class Product{
      int pid;
  

        Product()
        {
            System.out.println("Product Class parameterless Constructor called");
        }
    Product(int pid){
         this();  //this line will call to parameterless constructor of current object
        this.pid=pid;
        System.out.println("Parameterised constructor called");
    }
}

class Q41{
   
    public static void main(String[] args) {
             Scanner sc=new Scanner(System.in);
                
                Product p=new Product(1);
    }
}


Q42.	Create a class Tile to store the edge length of a square tile, and create another class Floor to store length and width of a rectangular floor.
Add method totalTiles(Tile t) in Floor class with Tile as argument to calculate the whole number of tiles neededto cover the floor completely.
=>
import java.util.Scanner;
class Tile{
    int length;

    Tile(int length){
        this.length=length;
    }
}


class Floor{
    int length;
    int width;

    Floor(int length,int width)
    {
        
        this.length=length;
        this.width=width;
    }

    void totalTiles(Tile t)
    {
        int fArea=length*width;
        int totalTiles=(int) fArea/t.length;
        System.out.println("\n"+totalTiles+" Tiles needed to cover the floor completely");
    }
}

class Q41{
   
    public static void main(String[] args) {
             Scanner sc=new Scanner(System.in);
              
            System.out.println("Enter the Tile length");
            int tSize=sc.nextInt();

            Tile t=new Tile(tSize);

            System.out.println("Enter the length of Floor:");
            int len=sc.nextInt();

            System.out.println("Enter the width of Floor:");
            int width=sc.nextInt();
            
            Floor f=new Floor(len,width);
            f.totalTiles(t);
    }
}


Q43.	Create a class OneBHK with instance variables roomArea, hallArea and price. Then create default constructor that initializes instance variables with some values and a parameterized constructor that takes values for all instance variables and stores them in instance variables. Now create a method named show()  to print OneBHK’s instance variable values.
Create another class TwoBHK which has (inherites) all the properties and behaviors of OneBHK and a new instance variable room2Area. Then create default constructor to initialize all 4 instance variables and a parameterized constructor to take the values for initialization of all instance variables. Override show() method to print all data member information.
Write main method in another class (Say Demo) and store three TwoBHK flat’s information and print information using show method. Also print total amount of all flats. 
=>
import java.util.Scanner;
class OneBHK{
      int roomArea;
      int hallArea;
      int price;
     static int totalPrice=0;

        OneBHK()
        {
            roomArea=50;
            hallArea=50;
            price=500000;
        }

        OneBHK(int room1,int hall,int price)
        {
            this();
            this.roomArea=room1;
            this.hallArea=hall;
            this.price=price;
            totalPrice+=price;
        }

    void show(){
        System.out.println("Room1 Area :"+roomArea);
        System.out.println("Hall Area:"+hallArea);
        System.out.println("Price :"+price);
    }
}


class TwoBHK extends OneBHK{
      int room2Area;
     
        TwoBHK()
        {
            this.room2Area=60;
        }

        TwoBHK(int room1,int hall,int price,int room2)
        {
            super(room1,hall,price);
            this.room2Area=room2;
        }

    void show(){
        System.out.println("Room1 Area :"+roomArea);
        System.out.println("Hall Area:"+hallArea);
        System.out.println("Price :"+price);
        System.out.println("Room2 Area :"+room2Area);
    }
}


class Q43{
   
    public static void main(String[] args) {
             Scanner sc=new Scanner(System.in);


             for(int i=0;i<3;i++)
             {
                System.out.println("Enter the Area of Room 1"); 
                int room1=sc.nextInt();

                System.out.println("Enter the Area of Room2"); 
                int room2=sc.nextInt();

                System.out.println("Enter the Area of Hall"); 
                int hall=sc.nextInt();

                System.out.println("Enter the Price of flat"); 
                int price=sc.nextInt();
                
                TwoBHK b=new TwoBHK(room1,hall,price,room2);
                b.show();

                System.out.println("All flats Total Price "+OneBHK.totalPrice);
             }
    }
}


Q44.	Create three classes
-	Faculty with two data members facultyId and salary and two methods, one intput() method for accepting facultyId as input and another printSalary() to print salary.
-	FullTimeFaculty that inherits class Faculty with two data members’ basicSalary and allowance. Override input() method in this class that calls super class inut() method and accepts basicSalary and allowance as input. Salary should not be accepted as input but should be calculated using formula (basicSalary + allowance)
-	PartTimeFaculty that inherits class Faculty with two data members’ workingHours, ratePerHour. Override input() method in this class that calls super class inut() method and accepts workingHours and ratePerHour as input. Salary should not be accepted as input but should be calculated using formula ( workingHour * ratePerHour )
=>
import java.util.*;

class Faculty{
    private int facultyId, salary; 

    void intput(int facultyId){
        System.out.println("Enter Faculty details.: ");
        this.facultyId = facultyId;
        //salary = sc.nextInt();
    } 
    void calSal(int sal){
        this.salary=sal;
    }
    void printSalary() {
        System.out.println("Salary: "+salary);
    }
}

class FullTimeFaculty extends Faculty{
    private int basicSalary, allowance, salary1;

    void intput(int facultyId,int basicSalary,int allowance){
        super.intput(facultyId);
        this.basicSalary = basicSalary;
        this.allowance = allowance;
        salary1 = basicSalary+allowance;
    }
    void calSal(){
        salary1 = basicSalary+allowance;
        super.calSal(salary1);
    } 
} 

class PartTimeFaculty extends Faculty{
    private int workingHour, ratePerHour, salary2;

    void intput(int facultyId,int workingHour,int ratePerHour){
        super.intput(facultyId);
        this.workingHour = workingHour;
        this.ratePerHour = ratePerHour;
        salary2 = workingHour * ratePerHour;
    }
    void calSal1()
    {   
        salary2 = workingHour * ratePerHour; 
        super.calSal(salary2);
    }
}

public class Q44{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int facultyId, salary, basicSalary, allowance, workingHour, ratePerHour;
        facultyId = sc.nextInt();
        basicSalary = sc.nextInt();
        allowance = sc.nextInt();
        workingHour = sc.nextInt();
        ratePerHour = sc.nextInt();

        FullTimeFaculty f1 = new FullTimeFaculty();
        f1.intput(facultyId,basicSalary, allowance);
        f1.calSal();
        f1.printSalary();

        PartTimeFaculty f2 = new PartTimeFaculty();
        f2.intput(facultyId,workingHour, ratePerHour);
        f2.calSal1();
        f2.printSalary();
    }
}


Q45.	Create a class Student with two members : rollno and percentage. Create default and parameterized constructors. Create method show() to display information.
Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. 
Also override show() method that calls super class show() method and displays semester. Create another class SchoolStudent inherits Student class. Add a new member

className(eg 12th ,10th etc.) to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays className. 
Create a class( say Demo) with main method that carries out the operation of the project : -- has array to store objects of any class(Student,  CollegeStudent or SchoolStudent)
--create two CollegeStudent  and three SchoolStudent objects and store them inside the array -- display all records from the array -- search record on the basic of rollno
and check given rollno is of SchoolStudent or of CollegeStudent. --count how many students are having A grade, if for A grade percentage >75. 
=>
import java.util.*;
class Student{
    int rollno ;
    float percentage;

    Student(int rollno , float percentage){
        this.rollno = rollno;
        this.percentage = percentage;
    }
    void show(){
        //Information
        System.out.println("\n\nRoll NO is : "+rollno);
        System.out.println("Percentage is : "+percentage);
    }
}
class CollegeStudent extends Student{
    int semester ;
    CollegeStudent(int rollno , float percentage ,int semester){
        super(rollno,percentage);
        this.semester = semester;

    }
    void show(){
        super.show();
        System.out.println("Semester is : "+semester);
    }
}
class SchoolStudent extends Student{
    String className;
    SchoolStudent(int rollno , float percentage , String className){
        super(rollno , percentage);
        this.className = className;
    }
    void show(){
        super.show();
        System.out.println("Class Name is : "+className);
    }
}

class Q45{
    public static void main(String[] agrs){
      

        CollegeStudent arrCollegeStudent[] = new CollegeStudent[2];
        SchoolStudent arrSchoolStudent[] = new SchoolStudent[3];

        int gradeCollegeStudent=0;
        int gradeSchoolStudent=0;

        Scanner sc = new Scanner(System.in);

        for(int i=0 ; i<arrCollegeStudent.length ; i++){
            System.out.print("\n\nEnter the Roll Number of Collage Student : ");
            int rollno =  sc.nextInt();
            System.out.print("Enter the Percentage of Collage Student : ");
            float percentage =  sc.nextFloat();
            System.out.print("Enter the Semester of Collage Student : ");
            int semester =  sc.nextInt();
            CollegeStudent cs = new CollegeStudent(rollno , percentage , semester );
            arrCollegeStudent[i] = cs;

            if(percentage >= 75) gradeSchoolStudent++;

        }

        for(int j=0 ; j<arrSchoolStudent.length ; j++){
            System.out.print("\n\nEnter the Roll Number of School Student : ");
            int rollno = sc.nextInt();
            System.out.print("Enter the Percentage of School Student : ");
            float percentage = sc.nextFloat();
            System.out.print("Enter the Class Name of School Student : ");
            String className = sc.next();
            SchoolStudent ss = new SchoolStudent(rollno , percentage , className);
            arrSchoolStudent[j] = ss;

            if(percentage >= 75) gradeSchoolStudent++;
        }
        for(CollegeStudent p : arrCollegeStudent) p.show();
        for(SchoolStudent q : arrSchoolStudent) q.show();

        System.out.print("Enter the Roll Number fo Seraching : ");
        int searchRollNo = sc.nextInt();
        byte flag = 1;
        for(int i=0 ; i < arrCollegeStudent.length ; i++){
            if(searchRollNo == arrCollegeStudent[i].rollno){
                System.out.println("Student is of College Student !!");
                flag = 0;
                break;
            }
            else{
                for(int j=0 ; j< arrSchoolStudent.length ; j++){
                    if(searchRollNo == arrSchoolStudent[i].rollno){
                        System.out.println("Student is of Scholl Student !!");
                        flag = 0;
                        break;
                    }
                   
                }
            }
        }
        if(flag == 1) System.out.println("Student Roll Number is Not Valid !!");
        int greadAStudent = gradeCollegeStudent+gradeSchoolStudent;
        System.out.println("Students are having A grade : "+greadAStudent);
    }
}


Q46.	Create a program to demonstrate the use of instanceof operator or secure reference down casting.
=>
class Person{
	void getDetail(){
		System.out.println("person details");
	}
	void getJob(){
		System.out.println("person job");
	}
}
class Employee extends Person{
	void getJob(){
		System.out.println("employee job");
	}
	void getDept(){
		System.out.println("employee dept");
	}
}
class Q46{
	public static void main(String args[]){

        Employee e1=new Employee();
        Employee e2=new Employee();
        Person p1=new Person();
		Person ar[] = {e1,e2,p1}; 
		for(Person a : ar){
            // a.getJob();
			if(a instanceof Employee){
			  Employee e = (Employee)a;
			  e.getJob();
			}
		}
	}
}


Q47.	Create a program to demonstrate constructor chaining.
=>
class Person{
	int price;

	Person(){
	System.out.println("person parameterless constructor called");
	}
	Person(int i){
		this.price=i;
		System.out.println("person parametrised constructor called");
	}
	
}
class Employee extends Person{
	Employee(){
		System.out.println("employee parameterless Constructor called");
	}

	Employee(int i,int j){
		super(i);
		System.out.println("employee parameterised Constructor called");
	}
}

class Manager extends Employee{
	Manager(){
		System.out.println("Manager parameterless constructor");
	}
	Manager(int i,int j,int k){
		super(i,j);
		System.out.println("Manager parameterised constructor");
	}
}
class Q47{
	public static void main(String args[]){

        Manager m=new Manager(1,2,3);
	}
}




Q48.	Create an Abstract class Processor with int member variable data  and method showData to display data value. Create abstract method process() to define processing 
of member data. Create a class  Factorial using abstract class Processor  to calculate and print factorial of a number by overriding the process method. 
b. Create a class Circle using abstract class Processor to calculate and print area of a circle by overriding the process method.Ask user to enter choice 
(factorial or circle area).  Also ask data to work upon. Use Processor class reference to achieve this mechanism.
=>
import java.util.Scanner;
abstract class Processor{
        int data;
       void showData()
       {
           System.out.println("Data :"+data);
       }

       abstract void process();
}

class Factorial extends Processor{
    int i,fact=1; 
        Factorial(int i)
        {
            data=i;
        }

        void process()
        {
                 
                for(i=1;i<=data;i++){    
                    fact=fact*i;    
                }    
                    
        } 

        void showData()
        {
          System.out.println("Factorial of "+data+" is: "+fact);    
        } 
}



class Circle extends Processor{
    final float PI=3.14F;
    float area;
        Circle(int i)
        {
            data=i;
        }

        void process()
        {
            area=(float) PI*data*data;    
                
        } 

        void showData()
        {
           System.out.println("Area of Circle is : "+area);    
        }
}


class Q48{
	public static void main(String args[]){

    Scanner sc=new Scanner(System.in);
    int no,ch;
    do{
        System.out.println("\n 1.Factorial \n 2.Area Of Circle \n 3.Exit");
        System.out.println("Enter the choice");
         ch=sc.nextInt();

        switch(ch)
        {
            case 1: System.out.println("Enter the number");
                    no=sc.nextInt();
                    Factorial f=new Factorial(no);
                    f.process();
                    f.showData();
            break;

            case 2: System.out.println("Enter the number");
                    no=sc.nextInt();
                    Circle c=new Circle(no);
                    c.process();
                    c.showData();
            break;

            case 3: System.exit(0);
            break;

            default: System.out.println("Invalid Input");
        }

    }while(ch!=3);
    
    }
}




Q49.	Create Interface Taxable with members salesTax=7% and incomeTax=10.5%. create abstract method calcTax(). a. Create class Employee(empId,name,salary) and 
implement Taxable to calculate incomeTax on yearly salary. b. Create class Product(pid,price,quantity) and implement Taxable to calculate salesTax on unit price of 
product. c. Create class for main method(Say XYZ), accept employee information and a product information from user and print income tax and sales tax respectively.
=>






